<?xml version="1.0" encoding="UTF-8"?>
<keywordspec generated="20161212 12:15:17" type="library" name="AppiumLibrary" format="ROBOT">
<version>1.3.7</version>
<scope>global</scope>
<namedargs>yes</namedargs>
<doc>AppiumLibrary is a App testing library for Robot Framework.

*Locating elements*

All keywords in AppiumLibrary that need to find an element on the app
take an argument, `locator`. By default, when a locator value is provided,
it is matched against the key attributes of the particular element type.
For example, `id` and `name` are key attributes to all elements, and
locating elements is easy using just the `id` as a `locator`. For example:

``Click Element  my_element``

Appium additionally supports some of the _Mobile JSON Wire Protocol_
(https://code.google.com/p/selenium/source/browse/spec-draft.md?repo=mobile) locator strategies
It is also possible to specify the approach AppiumLibrary should take
to find an element by specifying a lookup strategy with a locator
prefix. Supported strategies are:

| *Strategy*        | *Example*                                                      | *Description*                     |
| identifier        | Click Element `|` identifier=my_element                        | Matches by @id or @name attribute |
| id                | Click Element `|` id=my_element                                | Matches by @id attribute          |
| name              | Click Element `|` name=my_element                              | Matches by @name attribute        |
| xpath             | Click Element `|` xpath=//UIATableView/UIATableCell/UIAButton  | Matches with arbitrary XPath      |
| class             | Click Element `|` class=UIAPickerWheel                         | Matches by class                  |
| accessibility_id  | Click Element `|` accessibility_id=t                           | Accessibility options utilize.    |
| android           | Click Element `|` android=UiSelector().description('Apps')     | Matches by Android UI Automator   |
| ios               | Click Element `|` ios=.buttons().withName('Apps')              | Matches by iOS UI Automation      |
| css               | Click Element `|` css=.green_button                            | Matches by css in webview         |</doc>
<init>
<arguments>
<arg>timeout=5</arg>
<arg>run_on_failure=Capture Page Screenshot</arg>
</arguments>
<doc>AppiumLibrary can be imported with optional arguments.

`timeout` is the default timeout used to wait for all waiting actions.
It can be later set with `Set Appium Timeout`.

`run_on_failure` specifies the name of a keyword (from any available
libraries) to execute when a AppiumLibrary keyword fails. By default
`Capture Page Screenshot` will be used to take a screenshot of the current page.
Using the value `No Operation` will disable this feature altogether. See
`Register Keyword To Run On Failure` keyword for more information about this
functionality.

Examples:
| Library | AppiumLibrary | 10 | # Sets default timeout to 10 seconds                                                                             |
| Library | AppiumLibrary | timeout=10 | run_on_failure=No Operation | # Sets default timeout to 10 seconds and does nothing on failure           |</doc>
<tags>
</tags>
</init>
<kw name="Background App">
<arguments>
<arg>seconds=5</arg>
</arguments>
<doc>Puts the application in the background on the device for a certain
duration.</doc>
<tags>
</tags>
</kw>
<kw name="Capture Page Screenshot">
<arguments>
<arg>filename=None</arg>
</arguments>
<doc>Takes a screenshot of the current page and embeds it into the log.

`filename` argument specifies the name of the file to write the
screenshot into. If no `filename` is given, the screenshot is saved into file
`appium-screenshot-&lt;counter&gt;.png` under the directory where
the Robot Framework log file is written into. The `filename` is
also considered relative to the same directory, if it is not
given in absolute format.

`css` can be used to modify how the screenshot is taken. By default
the bakground color is changed to avoid possible problems with
background leaking when the page layout is somehow broken.</doc>
<tags>
</tags>
</kw>
<kw name="Clear Text">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Clears the text field identified by `locator`.

See `introduction` for details about locating elements.</doc>
<tags>
</tags>
</kw>
<kw name="Click A Point">
<arguments>
<arg>x=0</arg>
<arg>y=0</arg>
<arg>duration=100</arg>
</arguments>
<doc>Click on a point</doc>
<tags>
</tags>
</kw>
<kw name="Click Button">
<arguments>
<arg>index_or_name</arg>
</arguments>
<doc>Click button</doc>
<tags>
</tags>
</kw>
<kw name="Click Element">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Click element identified by `locator`.

Key attributes for arbitrary elements are `index` and `name`. See
`introduction` for details about locating elements.</doc>
<tags>
</tags>
</kw>
<kw name="Click Element At Coordinates">
<arguments>
<arg>coordinate_X</arg>
<arg>coordinate_Y</arg>
</arguments>
<doc>click element at a certain coordinate</doc>
<tags>
</tags>
</kw>
<kw name="Close All Applications">
<arguments>
</arguments>
<doc>Closes all open applications.

This keyword is meant to be used in test or suite teardown to
make sure all the applications are closed before the test execution
finishes.

After this keyword, the application indices returned by `Open Application`
are reset and start from `1`.</doc>
<tags>
</tags>
</kw>
<kw name="Close Application">
<arguments>
</arguments>
<doc>Closes the current application.</doc>
<tags>
</tags>
</kw>
<kw name="Element Attribute Should Match">
<arguments>
<arg>locator</arg>
<arg>attr_name</arg>
<arg>match_pattern</arg>
<arg>regexp=False</arg>
</arguments>
<doc>Verify that an attribute of an element matches the expected criteria.

The element is identified by _locator_. See `introduction` for details
about locating elements. If more than one element matches, the first element is selected.

The _attr_name_ is the name of the attribute within the selected element.

The _match_pattern_ is used for the matching, if the match_pattern is
- boolean or 'True'/'true'/'False'/'false' String then a boolean match is applied
- any other string is cause a string match

The _regexp_ defines whether the string match is done using regular expressions (i.e. BuiltIn Library's
[http://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Match%20Regexp|Should
Match Regexp] or string pattern match (i.e. BuiltIn Library's
[http://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Match|Should
Match])


Examples:

| Element Attribute Should Match | xpath = //*[contains(@text,'foo')] | text | *foobar |
| Element Attribute Should Match | xpath = //*[contains(@text,'foo')] | text | f.*ar | regexp = True |
| Element Attribute Should Match | xpath = //*[contains(@text,'foo')] | enabled | True |

| 1. is a string pattern match i.e. the 'text' attribute should end with the string 'foobar'
| 2. is a regular expression match i.e. the regexp 'f.*ar' should be within the 'text' attribute
| 3. is a boolead match i.e. the 'enabled' attribute should be True


_*NOTE: *_
On Android the supported attribute names are hard-coded in the
[https://github.com/appium/appium/blob/master/lib/devices/android/bootstrap/src/io/appium/android/bootstrap/AndroidElement.java|AndroidElement]
Class's getBoolAttribute() and getStringAttribute() methods.
Currently supported (appium v1.4.11):
_contentDescription, text, className, resourceId, enabled, checkable, checked, clickable, focusable, focused, longClickable, scrollable, selected, displayed_


_*NOTE: *_
Some attributes can be evaluated in two different ways e.g. these evaluate the same thing:

| Element Attribute Should Match | xpath = //*[contains(@text,'example text')] | name | txt_field_name |
| Element Name Should Be         | xpath = //*[contains(@text,'example text')] | txt_field_name |      |</doc>
<tags>
</tags>
</kw>
<kw name="Element Name Should Be">
<arguments>
<arg>locator</arg>
<arg>expected</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Element Should Be Disabled">
<arguments>
<arg>locator</arg>
<arg>loglevel=INFO</arg>
</arguments>
<doc>Verifies that element identified with locator is disabled.

Key attributes for arbitrary elements are `id` and `name`. See
`introduction` for details about locating elements.</doc>
<tags>
</tags>
</kw>
<kw name="Element Should Be Enabled">
<arguments>
<arg>locator</arg>
<arg>loglevel=INFO</arg>
</arguments>
<doc>Verifies that element identified with locator is enabled.

Key attributes for arbitrary elements are `id` and `name`. See
`introduction` for details about locating elements.</doc>
<tags>
</tags>
</kw>
<kw name="Element Value Should Be">
<arguments>
<arg>locator</arg>
<arg>expected</arg>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Get Appium Timeout">
<arguments>
</arguments>
<doc>Gets the timeout in seconds that is used by various keywords.

See `Set Appium Timeout` for an explanation.</doc>
<tags>
</tags>
</kw>
<kw name="Get Contexts">
<arguments>
</arguments>
<doc>Get available contexts.</doc>
<tags>
</tags>
</kw>
<kw name="Get Current Context">
<arguments>
</arguments>
<doc>Get current context.</doc>
<tags>
</tags>
</kw>
<kw name="Get Element Attribute">
<arguments>
<arg>locator</arg>
<arg>attribute</arg>
</arguments>
<doc>Get element attribute using given attribute: name, value,...

Examples:

| Get Element Attribute | locator | name |
| Get Element Attribute | locator | value |</doc>
<tags>
</tags>
</kw>
<kw name="Get Element Location">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Get element location

Key attributes for arbitrary elements are `id` and `name`. See
`introduction` for details about locating elements.</doc>
<tags>
</tags>
</kw>
<kw name="Get Element Size">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Get element size

Key attributes for arbitrary elements are `id` and `name`. See
`introduction` for details about locating elements.</doc>
<tags>
</tags>
</kw>
<kw name="Get Elements">
<arguments>
<arg>locator</arg>
<arg>first_element_only=False</arg>
<arg>fail_on_error=True</arg>
</arguments>
<doc>Return elements that match the search criteria

The element is identified by _locator_. See `introduction` for details
about locating elements.

If the _first_element_ is set to 'True' then only the first matching element is returned.

If the _fail_on_error_ is set to 'True' this keyword fails if the search return nothing.

Returns a list of [http://selenium-python.readthedocs.org/en/latest/api.html#module-selenium.webdriver.remote.webelement|WebElement] Objects.</doc>
<tags>
</tags>
</kw>
<kw name="Get Network Connection Status">
<arguments>
</arguments>
<doc>Returns an integer bitmask specifying the network connection type.

Android only.

See `set network connection status` for more details.</doc>
<tags>
</tags>
</kw>
<kw name="Get Source">
<arguments>
</arguments>
<doc>Returns the entire source of the current page.</doc>
<tags>
</tags>
</kw>
<kw name="Go Back">
<arguments>
</arguments>
<doc>Goes one step backward in the browser history.</doc>
<tags>
</tags>
</kw>
<kw name="Go To Url">
<arguments>
<arg>url</arg>
</arguments>
<doc>Opens URL in default web browser.

Example:
| Open Application  | http://localhost:4755/wd/hub | platformName=iOS | platformVersion=7.0 | deviceName='iPhone Simulator' | browserName=Safari |
| Go To URL         | http://m.webapp.com          |</doc>
<tags>
</tags>
</kw>
<kw name="Hide Keyboard">
<arguments>
<arg>key_name=None</arg>
</arguments>
<doc>Hides the software keyboard on the device. (optional) In iOS, use `key_name` to press
a particular key, ex. `Done`. In Android, no parameters are used.</doc>
<tags>
</tags>
</kw>
<kw name="Input Password">
<arguments>
<arg>locator</arg>
<arg>text</arg>
</arguments>
<doc>Types the given password into text field identified by `locator`.

Difference between this keyword and `Input Text` is that this keyword
does not log the given password. See `introduction` for details about
locating elements.</doc>
<tags>
</tags>
</kw>
<kw name="Input Text">
<arguments>
<arg>locator</arg>
<arg>text</arg>
</arguments>
<doc>Types the given `text` into text field identified by `locator`.

See `introduction` for details about locating elements.</doc>
<tags>
</tags>
</kw>
<kw name="Input Value">
<arguments>
<arg>locator</arg>
<arg>text</arg>
</arguments>
<doc>Sets the given value into text field identified by `locator`. This is an IOS only keyword, input value makes use of set_value

See `introduction` for details about locating elements.</doc>
<tags>
</tags>
</kw>
<kw name="Landscape">
<arguments>
</arguments>
<doc>Set the device orientation to LANDSCAPE</doc>
<tags>
</tags>
</kw>
<kw name="Lock">
<arguments>
</arguments>
<doc>Lock the device</doc>
<tags>
</tags>
</kw>
<kw name="Log Source">
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<doc>Logs and returns the entire html source of the current page or frame.

The `loglevel` argument defines the used log level. Valid log levels are
`WARN`, `INFO` (default), `DEBUG`, `TRACE` and `NONE` (no logging).</doc>
<tags>
</tags>
</kw>
<kw name="Long Press">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Long press the element</doc>
<tags>
</tags>
</kw>
<kw name="Long Press Keycode">
<arguments>
<arg>keycode</arg>
<arg>metastate=None</arg>
</arguments>
<doc>Sends a long press of keycode to the device.

Android only.

See `press keycode` for more details.</doc>
<tags>
</tags>
</kw>
<kw name="Open Application">
<arguments>
<arg>remote_url</arg>
<arg>alias=None</arg>
<arg>**kwargs</arg>
</arguments>
<doc>Opens a new application to given Appium server.
Capabilities of appium server, Android and iOS,
Please check http://appium.io/slate/en/master/?python#appium-server-capabilities
| *Option*            | *Man.* | *Description*     |
| remote_url          | Yes    | Appium server url |
| alias               | no     | alias             |

Examples:
| Open Application | http://localhost:4723/wd/hub | alias=Myapp1         | platformName=iOS      | platformVersion=7.0            | deviceName='iPhone Simulator'           | app=your.app                         |
| Open Application | http://localhost:4723/wd/hub | platformName=Android | platformVersion=4.2.2 | deviceName=192.168.56.101:5555 | app=${CURDIR}/demoapp/OrangeDemoApp.apk | appPackage=com.netease.qa.orangedemo | appActivity=MainActivity |</doc>
<tags>
</tags>
</kw>
<kw name="Page Should Contain Element">
<arguments>
<arg>locator</arg>
<arg>loglevel=INFO</arg>
</arguments>
<doc>Verifies that current page contains `locator` element.

If this keyword fails, it automatically logs the page source
using the log level specified with the optional `loglevel` argument.
Givin</doc>
<tags>
</tags>
</kw>
<kw name="Page Should Contain Text">
<arguments>
<arg>text</arg>
<arg>loglevel=INFO</arg>
</arguments>
<doc>Verifies that current page contains `text`.

If this keyword fails, it automatically logs the page source
using the log level specified with the optional `loglevel` argument.
Giving `NONE` as level disables logging.</doc>
<tags>
</tags>
</kw>
<kw name="Page Should Not Contain Element">
<arguments>
<arg>locator</arg>
<arg>loglevel=INFO</arg>
</arguments>
<doc>Verifies that current page not contains `locator` element.

If this keyword fails, it automatically logs the page source
using the log level specified with the optional `loglevel` argument.
Givin</doc>
<tags>
</tags>
</kw>
<kw name="Page Should Not Contain Text">
<arguments>
<arg>text</arg>
<arg>loglevel=INFO</arg>
</arguments>
<doc>Verifies that current page not contains `text`.

If this keyword fails, it automatically logs the page source
using the log level specified with the optional `loglevel` argument.
Giving `NONE` as level disables logging.</doc>
<tags>
</tags>
</kw>
<kw name="Pinch">
<arguments>
<arg>locator</arg>
<arg>percent=200%</arg>
<arg>steps=1</arg>
</arguments>
<doc>Pinch in on an element a certain amount.</doc>
<tags>
</tags>
</kw>
<kw name="Portrait">
<arguments>
</arguments>
<doc>Set the device orientation to PORTRAIT</doc>
<tags>
</tags>
</kw>
<kw name="Press Keycode">
<arguments>
<arg>keycode</arg>
<arg>metastate=None</arg>
</arguments>
<doc>Sends a press of keycode to the device.

Android only.

Possible keycodes &amp; meta states can be found in
http://developer.android.com/reference/android/view/KeyEvent.html

Meta state describe the pressed state of key modifiers such as
Shift, Ctrl &amp; Alt keys. The Meta State is an integer in which each
bit set to 1 represents a pressed meta key.

For example
- META_SHIFT_ON = 1
- META_ALT_ON = 2

| metastate=1 --&gt; Shift is pressed
| metastate=2 --&gt; Alt is pressed
| metastate=3 --&gt; Shift+Alt is pressed

 - _keycode- - the keycode to be sent to the device
 - _metastate- - status of the meta keys</doc>
<tags>
</tags>
</kw>
<kw name="Pull File">
<arguments>
<arg>path</arg>
<arg>decode=False</arg>
</arguments>
<doc>Retrieves the file at `path` and return it's content.

Android only.

 - _path_ - the path to the file on the device
 - _decode_ - True/False decode the data (base64) before returning it (default=False)</doc>
<tags>
</tags>
</kw>
<kw name="Pull Folder">
<arguments>
<arg>path</arg>
<arg>decode=False</arg>
</arguments>
<doc>Retrieves a folder at `path`. Returns the folder's contents zipped.

Android only.

 - _path_ - the path to the folder on the device
 - _decode_ - True/False decode the data (base64) before returning it (default=False)</doc>
<tags>
</tags>
</kw>
<kw name="Push File">
<arguments>
<arg>path</arg>
<arg>data</arg>
<arg>encode=False</arg>
</arguments>
<doc>Puts the data in the file specified as `path`.

Android only.

 - _path_ - the path on the device
 - _data_ - data to be written to the file
 - _encode_ - True/False encode the data as base64 before writing it to the file (default=False)</doc>
<tags>
</tags>
</kw>
<kw name="Register Keyword To Run On Failure">
<arguments>
<arg>keyword</arg>
</arguments>
<doc>Sets the keyword to execute when a AppiumLibrary keyword fails.

`keyword_name` is the name of a keyword (from any available
libraries) that  will be executed if a AppiumLibrary keyword fails.
It is not possible to use a keyword that requires arguments.
Using the value "Nothing" will disable this feature altogether.

The initial keyword to use is set in `importing`, and the
keyword that is used by default is `Capture Page Screenshot`.
Taking a screenshot when something failed is a very useful
feature, but notice that it can slow down the execution.

This keyword returns the name of the previously registered
failure keyword. It can be used to restore the original
value later.

Example:
| Register Keyword To Run On Failure  | Log Source | # Run `Log Source` on failure. |
| ${previous kw}= | Register Keyword To Run On Failure  | Nothing    | # Disables run-on-failure functionality and stores the previous kw name in a variable. |
| Register Keyword To Run On Failure  | ${previous kw} | # Restore to the previous keyword. |

This run-on-failure functionality only works when running tests on Python/Jython 2.4
or newer and it does not work on IronPython at all.</doc>
<tags>
</tags>
</kw>
<kw name="Remove Application">
<arguments>
<arg>application_id</arg>
</arguments>
<doc>Removes the application that is identified with an application id

Example:
| Remove Application |  com.netease.qa.orangedemo |</doc>
<tags>
</tags>
</kw>
<kw name="Reset Application">
<arguments>
</arguments>
<doc>Reset application</doc>
<tags>
</tags>
</kw>
<kw name="Scroll">
<arguments>
<arg>start_locator</arg>
<arg>end_locator</arg>
</arguments>
<doc>Scrolls from one element to another
Key attributes for arbitrary elements are `id` and `name`. See
`introduction` for details about locating elements.</doc>
<tags>
</tags>
</kw>
<kw name="Scroll Down">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Scrolls down to element</doc>
<tags>
</tags>
</kw>
<kw name="Scroll Up">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Scrolls up to element</doc>
<tags>
</tags>
</kw>
<kw name="Set Appium Timeout">
<arguments>
<arg>seconds</arg>
</arguments>
<doc>Sets the timeout in seconds used by various keywords.

There are several `Wait ...` keywords that take timeout as an
argument. All of these timeout arguments are optional. The timeout
used by all of them can be set globally using this keyword.

The previous timeout value is returned by this keyword and can
be used to set the old value back later. The default timeout
is 5 seconds, but it can be altered in `importing`.

Example:
| ${orig timeout} = | Set Appium Timeout | 15 seconds |
| Open page that loads slowly |
| Set Appium Timeout | ${orig timeout} |</doc>
<tags>
</tags>
</kw>
<kw name="Set Network Connection Status">
<arguments>
<arg>connectionStatus</arg>
</arguments>
<doc>Sets the network connection Status.

Android only.

Possible values:
    | =Value= | =Alias=          | =Data= | =Wifi= | =Airplane Mode=  |
    |  0      | (None)           | 0      |   0    | 0                |
    |  1      | (Airplane Mode)  | 0      |   0    | 1                |
    |  2      | (Wifi only)      | 0      |   1    | 0                |
    |  4      | (Data only)      | 1      |   0    | 0                |
    |  6      | (All network on) | 1      |   1    | 0                |</doc>
<tags>
</tags>
</kw>
<kw name="Shake">
<arguments>
</arguments>
<doc>Shake the device</doc>
<tags>
</tags>
</kw>
<kw name="Swipe">
<arguments>
<arg>start_x</arg>
<arg>start_y</arg>
<arg>offset_x</arg>
<arg>offset_y</arg>
<arg>duration=1000</arg>
</arguments>
<doc>Swipe from one point to another point, for an optional duration.

:Args:
 - start_x - x-coordinate at which to start
 - start_y - y-coordinate at which to start
 - offset_x - x-coordinate distance from start_x at which to stop
 - offset_y - y-coordinate distance from start_y at which to stop
 - duration - (optional) time to take the swipe, in ms.

:Usage:
    Swipe    ${100}  ${100}  ${300}  ${0}</doc>
<tags>
</tags>
</kw>
<kw name="Switch Application">
<arguments>
<arg>index_or_alias</arg>
</arguments>
<doc>Switches the active application by index or alias.

`index_or_alias` is either application index (an integer) or alias
(a string). Index is got as the return value of `Open Application`.

This keyword returns the index of the previous active application,
which can be used to switch back to that application later.

Example:
| ${appium1}=              | Open Application  | http://localhost:4723/wd/hub                   | alias=MyApp1 | platformName=iOS | platformVersion=7.0 | deviceName='iPhone Simulator' | app=your.app |
| ${appium2}=              | Open Application  | http://localhost:4755/wd/hub                   | alias=MyApp2 | platformName=iOS | platformVersion=7.0 | deviceName='iPhone Simulator' | app=your.app |
| Click Element            | sendHello         | # Executed on appium running at localhost:4755 |
| Switch Application       | ${appium1}        | # Switch using index                           |
| Click Element            | ackHello          | # Executed on appium running at localhost:4723 |
| Switch Application       | MyApp2            | # Switch using alias                           |
| Page Should Contain Text | ackHello Received | # Executed on appium running at localhost:4755 |</doc>
<tags>
</tags>
</kw>
<kw name="Switch To Context">
<arguments>
<arg>context_name</arg>
</arguments>
<doc>Switch to a new context</doc>
<tags>
</tags>
</kw>
<kw name="Tap">
<arguments>
<arg>locator</arg>
</arguments>
<doc>Tap on element</doc>
<tags>
</tags>
</kw>
<kw name="Wait Until Page Contains">
<arguments>
<arg>text</arg>
<arg>timeout=None</arg>
<arg>error=None</arg>
</arguments>
<doc>Waits until `text` appears on current page.

Fails if `timeout` expires before the text appears. See
`introduction` for more information about `timeout` and its
default value.

`error` can be used to override the default error message.

See also `Wait Until Page Does Not Contain`,
`Wait Until Page Contains Element`,
`Wait Until Page Does Not Contain Element` and
BuiltIn keyword `Wait Until Keyword Succeeds`.</doc>
<tags>
</tags>
</kw>
<kw name="Wait Until Page Contains Element">
<arguments>
<arg>locator</arg>
<arg>timeout=None</arg>
<arg>error=None</arg>
</arguments>
<doc>Waits until element specified with `locator` appears on current page.

Fails if `timeout` expires before the element appears. See
`introduction` for more information about `timeout` and its
default value.

`error` can be used to override the default error message.

See also `Wait Until Page Contains`,
`Wait Until Page Does Not Contain`
`Wait Until Page Does Not Contain Element`
and BuiltIn keyword `Wait Until Keyword Succeeds`.</doc>
<tags>
</tags>
</kw>
<kw name="Wait Until Page Does Not Contain">
<arguments>
<arg>text</arg>
<arg>timeout=None</arg>
<arg>error=None</arg>
</arguments>
<doc>Waits until `text` disappears from current page.

Fails if `timeout` expires before the `text` disappears. See
`introduction` for more information about `timeout` and its
default value.

`error` can be used to override the default error message.

See also `Wait Until Page Contains`,
`Wait Until Page Contains Element`,
`Wait Until Page Does Not Contain Element` and
BuiltIn keyword `Wait Until Keyword Succeeds`.</doc>
<tags>
</tags>
</kw>
<kw name="Wait Until Page Does Not Contain Element">
<arguments>
<arg>locator</arg>
<arg>timeout=None</arg>
<arg>error=None</arg>
</arguments>
<doc>Waits until element specified with `locator` disappears from current page.

Fails if `timeout` expires before the element disappears. See
`introduction` for more information about `timeout` and its
default value.

`error` can be used to override the default error message.

See also `Wait Until Page Contains`,
`Wait Until Page Does Not Contain`,
`Wait Until Page Contains Element` and
BuiltIn keyword `Wait Until Keyword Succeeds`.</doc>
<tags>
</tags>
</kw>
<kw name="Zoom">
<arguments>
<arg>locator</arg>
<arg>percent=200%</arg>
<arg>steps=1</arg>
</arguments>
<doc>Zooms in on an element a certain amount.</doc>
<tags>
</tags>
</kw>
</keywordspec>
